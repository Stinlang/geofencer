{"version":3,"sources":["components/base-map.tsx","config/index.ts","components/app-container.tsx","index.tsx"],"names":["initialViewState","bearing","latitude","longitude","pitch","zoom","BaseMap","useState","features","type","data","setData","mode","setMode","selectedFeatureIndexes","setSelectedFeatureIndexes","useEffect","geo","selectedFeature","geometry","getSelectedGeometry","console","log","Geometry","parseGeoJSON","toWkt","layers","props","e","this","isFeaturePicked","picks","selectedIndexes","map","pick","index","length","filter","object","EditableGeoJsonLayer","getFillColor","_","isSelected","getLineColor","getLineDashArray","getTentativeLineColor","id","onEdit","updatedData","controller","mapboxApiAccessToken","width","height","ScrollableContainer","styled","div","AppContainer","ReactDOM","render","document","getElementById"],"mappings":"iVAkBMA,EAAmB,CACvBC,QAAS,EACTC,SAAU,QACVC,WAAY,UACZC,MAAO,EACPC,KAAM,IAuFOC,EApFC,WAAO,IAAD,EACIC,mBAAS,CAC/BC,SAAU,GACVC,KAAM,sBAHY,mBACbC,EADa,KACPC,EADO,OAKIJ,mBAAiB,eALrB,mBAKbK,EALa,KAKPC,EALO,OAMwCN,mBAE1D,IARkB,mBAMbO,EANa,KAMWC,EANX,KAepBC,oBAAU,WACR,IAAMC,EANyB,WAC/B,IAAMC,EAAuBR,EAAKF,SAASM,EAAuB,IAClE,OAAOI,EAAkBA,EAAgBC,SAAW,KAIxCC,GACRH,IACFI,QAAQC,IAAIL,GACZI,QAAQC,IAAIC,WAASC,aAAaP,GAAKQ,WAExC,CAACX,IArBgB,IAqDdY,EAAS,CACb,IAtDkB,YAwBlB,WAAYC,GAAa,qEACjBA,IAzBU,0EA4BKC,GACrB,GAAIC,KAAKC,gBAAgBF,EAAEG,OAAQ,CACjC,IAAMC,EAAkBJ,EAAEG,MAAME,IAAI,SAAAC,GAAI,OAAIA,EAAKC,QACjDpB,EAA0BiB,GACF,cAApBH,KAAKF,MAAMf,MACbC,EAAQ,kBAGNC,EAAuBsB,QACzBrB,EAA0B,IAE5BF,EAAQ,eAEV,oEAAmBe,KAzCH,sCA4CMG,GACtB,QAAKA,EAAMK,QAGJL,EAAMM,OAAO,SAACH,GAAD,MAAqC,YAArBA,EAAKI,OAAO7B,OAC7C2B,WAjDa,GAuBqBG,wBA+BvC,CAA+B,CAC7B7B,OACA8B,aAAc,SAACC,EAAQC,GAAT,OACZA,EAAa,CAAC,IAAK,EAAG,EAAG,KAAO,CAAC,EAAG,EAAG,EAAG,MAC5CC,aAAc,SAACF,EAAQC,GAAT,OACZA,EAAa,CAAC,IAAK,EAAG,EAAG,KAAO,CAAC,EAAG,EAAG,EAAG,MAC5CE,iBAAkB,iBAAM,CAAC,EAAG,IAC5BC,sBAAuB,iBAAM,CAAC,GAAI,EAAG,EAAG,MACxCC,GAAI,0BACJlC,OACAmC,OAAQ,gBAAGC,EAAH,EAAGA,YAAH,OAA0BrC,EAAQqC,IAC1ClC,4BAIJ,OACE,kBAAC,IAAD,CACEd,iBAAkBA,EAClBiD,YAAY,EACZvB,OAAQA,GAER,kBAAC,IAAD,CACEwB,qBCrGN,6FDsGMC,MAAO,EACPC,OAAQ,M,4FEpGhB,IAAMC,EAAsBC,IAAOC,IAAV,KAUVC,EANM,kBACnB,kBAACH,EAAD,KACE,kBAAC,EAAD,Q,OCLJI,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,W","file":"static/js/main.99495149.chunk.js","sourcesContent":["import DeckGL from '@deck.gl/react';\nimport { EditableGeoJsonLayer } from '@nebula.gl/layers';\nimport React, { useEffect, useState } from 'react';\nimport { StaticMap } from 'react-map-gl';\nimport { Geometry } from 'wkx';\nimport { PUBLIC_MAPBOX_TOKEN } from '../config';\n\ninterface Pick {\n  object: { type: string };\n  index: number;\n}\n\ninterface LayerEvent {\n  groundCoords: [number, number];\n  picks: Array<Pick>;\n  screenCoords: [number, number];\n}\n\nconst initialViewState = {\n  bearing: 0,\n  latitude: 37.7853,\n  longitude: -122.41669,\n  pitch: 0,\n  zoom: 11,\n};\n\nconst BaseMap = () => {\n  const [data, setData] = useState({\n    features: [],\n    type: 'FeatureCollection',\n  });\n  const [mode, setMode] = useState<string>('drawPolygon');\n  const [selectedFeatureIndexes, setSelectedFeatureIndexes] = useState<\n    Array<number>\n  >([]);\n\n  const getSelectedGeometry: any = () => {\n    const selectedFeature: any = data.features[selectedFeatureIndexes[0]];\n    return selectedFeature ? selectedFeature.geometry : null;\n  };\n\n  useEffect(() => {\n    const geo = getSelectedGeometry();\n    if (geo) {\n      console.log(geo);\n      console.log(Geometry.parseGeoJSON(geo).toWkt());\n    }\n  }, [selectedFeatureIndexes]);\n\n  class CustomEditableGeoJsonLayer extends EditableGeoJsonLayer {\n    constructor(props: any) {\n      super(props);\n    }\n\n    protected onLayerClick(e: LayerEvent) {\n      if (this.isFeaturePicked(e.picks)) {\n        const selectedIndexes = e.picks.map(pick => pick.index);\n        setSelectedFeatureIndexes(selectedIndexes);\n        if (this.props.mode !== 'translate') {\n          setMode('translate');\n        }\n      } else {\n        if (selectedFeatureIndexes.length) {\n          setSelectedFeatureIndexes([]);\n        }\n        setMode('drawPolygon');\n      }\n      super.onLayerClick(e);\n    }\n\n    private isFeaturePicked(picks: Array<Pick>) {\n      if (!picks.length) {\n        return false;\n      }\n      return picks.filter((pick: Pick) => pick.object.type === 'Feature')\n        .length;\n    }\n  }\n\n  const layers = [\n    new CustomEditableGeoJsonLayer({\n      data,\n      getFillColor: (_: any, isSelected: boolean) =>\n        isSelected ? [255, 0, 0, 150] : [0, 0, 0, 150],\n      getLineColor: (_: any, isSelected: boolean) =>\n        isSelected ? [200, 0, 0, 255] : [0, 0, 0, 255],\n      getLineDashArray: () => [0, 0],\n      getTentativeLineColor: () => [10, 0, 0, 200],\n      id: 'selected-features-layer',\n      mode,\n      onEdit: ({ updatedData }: any) => setData(updatedData),\n      selectedFeatureIndexes,\n    }),\n  ];\n\n  return (\n    <DeckGL\n      initialViewState={initialViewState}\n      controller={true}\n      layers={layers}\n    >\n      <StaticMap\n        mapboxApiAccessToken={PUBLIC_MAPBOX_TOKEN}\n        width={0}\n        height={0}\n      />\n    </DeckGL>\n  );\n};\n\nexport default BaseMap;\n","export const PUBLIC_MAPBOX_TOKEN =\n  'pk.eyJ1Ijoic3RpbmxhbmciLCJhIjoiY2swOTdkemY4MDV0cDNjcGM0bnVoZG02NSJ9.yQ1GB5APWkDLz_JIBEAw5A';\n","import React from 'react';\nimport styled from 'styled-components';\nimport BaseMap from './base-map';\n\nconst ScrollableContainer = styled.div`\n  overflow: scroll;\n`;\n\nconst AppContainer = () => (\n  <ScrollableContainer>\n    <BaseMap />\n  </ScrollableContainer>\n);\n\nexport default AppContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppContainer from './components/app-container';\nimport './static/index.css';\n\nReactDOM.render(<AppContainer />, document.getElementById('root'));\n"],"sourceRoot":""}
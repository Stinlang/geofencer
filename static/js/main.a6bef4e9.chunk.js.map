{"version":3,"sources":["components/base-map.tsx","config/index.ts","components/icons/icon-template.tsx","components/icons/github.tsx","components/top-nav.tsx","components/app-container.tsx","index.tsx"],"names":["initialViewState","bearing","latitude","longitude","pitch","zoom","BaseMap","useState","features","type","data","setData","cursor","setCursor","mode","setMode","selectedFeatureIndexes","setSelectedFeatureIndexes","useEffect","selectedFeature","geo","geometry","console","log","Geometry","parseGeoJSON","toWkt","layers","props","event","this","isFeaturePicked","picks","selectedIndexes","map","pick","index","length","filter","object","EditableGeoJsonLayer","getFillColor","_","isSelected","getLineColor","getLineDashArray","getTentativeLineColor","id","onEdit","updatedData","controller","getCursor","mapboxApiAccessToken","width","height","size","color","topOffset","leftOffset","path","style","left","position","top","viewBox","fill","d","GithubIcon","TopNavContainer","styled","div","Logo","a","GithubIconStyle","TopNav","href","ScrollableContainer","AppContainer","ReactDOM","render","document","getElementById"],"mappings":"iVAkBMA,EAAmB,CACvBC,QAAS,EACTC,SAAU,QACVC,WAAY,UACZC,MAAO,EACPC,KAAM,IAiGOC,EA9FC,WAAO,IAAD,EACIC,mBAAS,CAC/BC,SAAU,GACVC,KAAM,sBAHY,mBACbC,EADa,KACPC,EADO,OAKQJ,mBAAiB,cALzB,mBAKbK,EALa,KAKLC,EALK,OAMIN,mBAAiB,eANrB,mBAMbO,EANa,KAMPC,EANO,OAOwCR,mBAE1D,IATkB,mBAObS,EAPa,KAOWC,EAPX,KAWpBC,oBAAU,WACR,IAAMC,EAAuBT,EAAKF,SAASQ,EAAuB,IAC5DI,EAAMD,EAAkBA,EAAgBE,SAAW,KACrDD,IACFE,QAAQC,IAAIH,GACZE,QAAQC,IAAIC,WAASC,aAAaL,GAAKM,WAExC,CAACV,EAAwBN,EAAKF,WAlBb,IA8DdmB,EAAS,CACb,IA/DkB,YAqBlB,WAAYC,GAAa,qEACjBA,IAtBU,0EAyBKC,GACrB,GAAIC,KAAKC,gBAAgBF,EAAMG,OAAQ,CACrC,IAAMC,EAAkBJ,EAAMG,MAAME,IAAI,SAAAC,GAAI,OAAIA,EAAKC,QACrDnB,EAA0BgB,GAC1BpB,EAAU,cACc,cAApBiB,KAAKF,MAAMd,MACbC,EAAQ,kBAGNC,EAAuBqB,QACzBpB,EAA0B,IAE5BF,EAAQ,eAEV,oEAAmBc,KAvCH,oCA0CMA,GAAa,IAC3BG,EAAUH,EAAVG,MACDG,EAF2B,YAEnBH,EAFmB,MAG9BG,GAAQA,EAAKC,QAAUpB,EAAuB,GAChDH,EAAU,cAEVA,EAAU,QAEZ,qEAAoBgB,KAlDJ,sCAqDMG,GACtB,QAAKA,EAAMK,QAGJL,EAAMM,OAAO,SAACH,GAAD,MAAqC,YAArBA,EAAKI,OAAO9B,OAC7C4B,WA1Da,GAoBqBG,wBA2CvC,CAA+B,CAC7B9B,OACA+B,aAAc,SAACC,EAAQC,GAAT,OACZA,EAAa,CAAC,IAAK,EAAG,EAAG,KAAO,CAAC,EAAG,EAAG,EAAG,MAC5CC,aAAc,SAACF,EAAQC,GAAT,OACZA,EAAa,CAAC,IAAK,EAAG,EAAG,KAAO,CAAC,EAAG,EAAG,EAAG,MAC5CE,iBAAkB,iBAAM,CAAC,EAAG,IAC5BC,sBAAuB,iBAAM,CAAC,GAAI,EAAG,EAAG,MACxCC,GAAI,0BACJjC,OACAkC,OAAQ,gBAAGC,EAAH,EAAGA,YAAH,OAA0BtC,EAAQsC,IAC1CjC,4BAIJ,OACE,kBAAC,IAAD,CACEhB,iBAAkBA,EAClBkD,YAAY,EACZvB,OAAQA,EACRwB,UAAW,kBAAMvC,IAEjB,kBAAC,IAAD,CACEwC,qBC/GN,6FDgHMC,MAAO,EACPC,OAAQ,MExGD,cAMD,IAAD,IALXC,YAKW,MALJ,OAKI,MAJXC,aAIW,MAJH,QAIG,MAHXC,iBAGW,MAHC,MAGD,MAFXC,kBAEW,MAFE,MAEF,EADXC,EACW,EADXA,KAEMC,EAAQ,CACZN,OAAQC,EACRM,KAAMH,EACNI,SAAU,WACVC,IAAKN,EACLJ,MAAOE,GAET,OACE,yBAAKK,MAAOA,EAAOI,QAAQ,aACzB,0BAAMC,KAAMT,EAAOU,EAAGP,MCJbQ,EARI,SAAC,GAAD,QACjBZ,YADiB,MACV,KADU,MAEjBC,aAFiB,MAET,QAFS,SAMb,kBAAC,EAAD,CAAcD,KAAMA,EAAMC,MAAOA,EAAOC,UAAU,MAAME,KAhB5D,ivB,4iBCAF,IAAMS,EAAkBC,IAAOC,IAAV,KAafC,EAAOF,IAAOG,EAAV,KAQJC,EAAkBJ,IAAOG,EAAV,KAaNE,EATA,kBACb,kBAACN,EAAD,KACE,kBAACG,EAAD,CAAMI,KAAK,KAAX,aACA,kBAACF,EAAD,CAAiBE,KAAK,yCACpB,kBAAC,EAAD,CAAYpB,KAAK,U,4FC5BvB,IAAMqB,EAAsBP,IAAOC,IAAV,KAWVO,EAPM,kBACnB,kBAACD,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,OCPJE,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,W","file":"static/js/main.a6bef4e9.chunk.js","sourcesContent":["import DeckGL from '@deck.gl/react';\nimport { EditableGeoJsonLayer } from '@nebula.gl/layers';\nimport React, { useEffect, useState } from 'react';\nimport { StaticMap } from 'react-map-gl';\nimport { Geometry } from 'wkx';\nimport { PUBLIC_MAPBOX_TOKEN } from '../config';\n\ninterface Pick {\n  object: { type: string };\n  index: number;\n}\n\ninterface LayerEvent {\n  groundCoords: [number, number];\n  picks: Array<Pick>;\n  screenCoords: [number, number];\n}\n\nconst initialViewState = {\n  bearing: 0,\n  latitude: 37.7853,\n  longitude: -122.41669,\n  pitch: 0,\n  zoom: 11,\n};\n\nconst BaseMap = () => {\n  const [data, setData] = useState({\n    features: [],\n    type: 'FeatureCollection',\n  });\n  const [cursor, setCursor] = useState<string>('all-scroll');\n  const [mode, setMode] = useState<string>('drawPolygon');\n  const [selectedFeatureIndexes, setSelectedFeatureIndexes] = useState<\n    Array<number>\n  >([]);\n\n  useEffect(() => {\n    const selectedFeature: any = data.features[selectedFeatureIndexes[0]];\n    const geo = selectedFeature ? selectedFeature.geometry : null;\n    if (geo) {\n      console.log(geo);\n      console.log(Geometry.parseGeoJSON(geo).toWkt());\n    }\n  }, [selectedFeatureIndexes, data.features]);\n\n  class CustomEditableGeoJsonLayer extends EditableGeoJsonLayer {\n    constructor(props: any) {\n      super(props);\n    }\n\n    protected onLayerClick(event: LayerEvent) {\n      if (this.isFeaturePicked(event.picks)) {\n        const selectedIndexes = event.picks.map(pick => pick.index);\n        setSelectedFeatureIndexes(selectedIndexes);\n        setCursor('all-scroll');\n        if (this.props.mode !== 'translate') {\n          setMode('translate');\n        }\n      } else {\n        if (selectedFeatureIndexes.length) {\n          setSelectedFeatureIndexes([]);\n        }\n        setMode('drawPolygon');\n      }\n      super.onLayerClick(event);\n    }\n\n    protected onPointerMove(event: any) {\n      const { picks } = event;\n      const [pick] = picks;\n      if (pick && pick.index === selectedFeatureIndexes[0]) {\n        setCursor('all-scroll');\n      } else {\n        setCursor('grab');\n      }\n      super.onPointerMove(event);\n    }\n\n    private isFeaturePicked(picks: Array<Pick>) {\n      if (!picks.length) {\n        return false;\n      }\n      return picks.filter((pick: Pick) => pick.object.type === 'Feature')\n        .length;\n    }\n  }\n\n  const layers = [\n    new CustomEditableGeoJsonLayer({\n      data,\n      getFillColor: (_: any, isSelected: boolean) =>\n        isSelected ? [255, 0, 0, 150] : [0, 0, 0, 150],\n      getLineColor: (_: any, isSelected: boolean) =>\n        isSelected ? [200, 0, 0, 255] : [0, 0, 0, 255],\n      getLineDashArray: () => [0, 0],\n      getTentativeLineColor: () => [10, 0, 0, 200],\n      id: 'selected-features-layer',\n      mode,\n      onEdit: ({ updatedData }: any) => setData(updatedData),\n      selectedFeatureIndexes,\n    }),\n  ];\n\n  return (\n    <DeckGL\n      initialViewState={initialViewState}\n      controller={true}\n      layers={layers}\n      getCursor={() => cursor}\n    >\n      <StaticMap\n        mapboxApiAccessToken={PUBLIC_MAPBOX_TOKEN}\n        width={0}\n        height={0}\n      />\n    </DeckGL>\n  );\n};\n\nexport default BaseMap;\n","export const PUBLIC_MAPBOX_TOKEN =\n  'pk.eyJ1Ijoic3RpbmxhbmciLCJhIjoiY2swOTdkemY4MDV0cDNjcGM0bnVoZG02NSJ9.yQ1GB5APWkDLz_JIBEAw5A';\n","import React from 'react';\n\nexport interface Props {\n  size?: string;\n  color?: string;\n  topOffset?: string;\n  leftOffset?: string;\n  path: string;\n}\n\nexport default ({\n  size = '24px',\n  color = 'black',\n  topOffset = '0px',\n  leftOffset = '0px',\n  path,\n}: Props) => {\n  const style = {\n    height: size,\n    left: leftOffset,\n    position: 'relative' as 'relative',\n    top: topOffset,\n    width: size,\n  };\n  return (\n    <svg style={style} viewBox=\"0 0 24 24\">\n      <path fill={color} d={path} />\n    </svg>\n  );\n};\n","import React from 'react';\nimport IconTemplate from './icon-template';\n\nconst path =\n  'M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,' +\n  '21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,' +\n  '16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,' +\n  '17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,' +\n  '8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,' +\n  '6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 ' +\n  '17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,' +\n  '17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,' +\n  '20.16 22,16.42 22,12A10,10 0 0,0 12,2Z';\n\nconst GithubIcon = ({\n  size = '24',\n  color = 'white',\n}: {\n  size?: string;\n  color?: string;\n}) => <IconTemplate size={size} color={color} topOffset=\"1px\" path={path} />;\n\nexport default GithubIcon;\n","import React from 'react';\nimport styled from 'styled-components';\nimport GithubIcon from './icons/github';\n\nconst TopNavContainer = styled.div`\n  position: fixed;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  z-index: 10000;\n  width: 100vw;\n  top: 0;\n  height: 60px;\n  background-color: #1c2230;\n`;\n\nconst Logo = styled.a`\n  color: white;\n  text-decoration: none;\n  font-size: 30px;\n  padding: 10px 0;\n  margin: 0 100px;\n`;\n\nconst GithubIconStyle = styled.a`\n  margin: 5px 50px 0 0;\n`;\n\nconst TopNav = () => (\n  <TopNavContainer>\n    <Logo href=\"/\">Geofencer</Logo>\n    <GithubIconStyle href=\"https://github.com/Stinlang/geofencer\">\n      <GithubIcon size=\"40\" />\n    </GithubIconStyle>\n  </TopNavContainer>\n);\n\nexport default TopNav;\n","import React from 'react';\nimport styled from 'styled-components';\nimport BaseMap from './base-map';\nimport TopNav from './top-nav';\n\nconst ScrollableContainer = styled.div`\n  overflow: scroll;\n`;\n\nconst AppContainer = () => (\n  <ScrollableContainer>\n    <TopNav />\n    <BaseMap />\n  </ScrollableContainer>\n);\n\nexport default AppContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppContainer from './components/app-container';\nimport './static/index.css';\n\nReactDOM.render(<AppContainer />, document.getElementById('root'));\n"],"sourceRoot":""}